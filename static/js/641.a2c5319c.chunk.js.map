{"version":3,"file":"static/js/641.a2c5319c.chunk.js","mappings":"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","sources":["components/Background3D/Background3D.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport styled from 'styled-components';\n\nconst BackgroundContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n  background: linear-gradient(to bottom, #0a192f, #0a192f);\n`;\n\nconst CursorEffect = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 10;\n`;\n\nconst Background3D = () => {\n  const containerRef = useRef();\n  const cursorRef = useRef();\n  const sceneRef = useRef();\n  const cameraRef = useRef();\n  const rendererRef = useRef();\n  const controlsRef = useRef();\n  const spheresRef = useRef([]);\n  const particlesRef = useRef();\n  const raycasterRef = useRef();\n  const clockRef = useRef(new THREE.Clock());\n  const mouseRef = useRef({ x: 0, y: 0, worldX: 0, worldY: 0 });\n  const cursorTrailRef = useRef([]);\n  const targetRotationRef = useRef({ x: 0, y: 0 });\n\n  const createScene = () => {\n    const HEIGHT = window.innerHeight;\n    const WIDTH = window.innerWidth;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x0a192f);\n    sceneRef.current = scene;\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(75, WIDTH / HEIGHT, 0.1, 1000);\n    camera.position.z = 50;\n    cameraRef.current = camera;\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true,\n    });\n    renderer.setSize(WIDTH, HEIGHT);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    containerRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = false;\n    controls.enablePan = false;\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.rotateSpeed = 0.5;\n    controlsRef.current = controls;\n\n    // Raycaster\n    raycasterRef.current = new THREE.Raycaster();\n  };\n\n  const createLights = () => {\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    const pointLight = new THREE.PointLight(0x64ffda, 1);\n    pointLight.position.set(5, 5, 5);\n    \n    const pointLight2 = new THREE.PointLight(0x64ffda, 0.5);\n    pointLight2.position.set(-5, -5, 5);\n    \n    sceneRef.current.add(ambientLight, pointLight, pointLight2);\n  };\n\n  const createParticles = () => {\n    const particlesGeometry = new THREE.BufferGeometry();\n    const count = 3000;\n    const positions = new Float32Array(count * 3);\n    const colors = new Float32Array(count * 3);\n    const scales = new Float32Array(count);\n\n    const color1 = new THREE.Color(0x64ffda);\n    const color2 = new THREE.Color(0x0a192f);\n\n    for (let i = 0; i < count * 3; i += 3) {\n      positions[i] = (Math.random() - 0.5) * 100;\n      positions[i + 1] = (Math.random() - 0.5) * 100;\n      positions[i + 2] = (Math.random() - 0.5) * 100;\n\n      const mixedColor = color1.clone().lerp(color2, Math.random() * 0.5);\n      colors[i] = mixedColor.r;\n      colors[i + 1] = mixedColor.g;\n      colors[i + 2] = mixedColor.b;\n\n      scales[i / 3] = Math.random();\n    }\n\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    particlesGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n    particlesGeometry.setAttribute('scale', new THREE.BufferAttribute(scales, 1));\n\n    const particlesMaterial = new THREE.PointsMaterial({\n      size: 0.3,\n      sizeAttenuation: true,\n      transparent: true,\n      opacity: 0.8,\n      vertexColors: true,\n      blending: THREE.AdditiveBlending,\n    });\n\n    const particles = new THREE.Points(particlesGeometry, particlesMaterial);\n    sceneRef.current.add(particles);\n    particlesRef.current = particles;\n  };\n\n  const createBubbles = () => {\n    const bubbleGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const bubbleMaterial = new THREE.MeshPhysicalMaterial({\n      color: 0x64ffda,\n      transparent: true,\n      opacity: 0.2,\n      roughness: 0.2,\n      metalness: 0.5,\n      clearcoat: 1.0,\n      clearcoatRoughness: 0.1,\n    });\n\n    for (let i = 0; i < 25; i++) {\n      const bubble = new THREE.Mesh(bubbleGeometry, bubbleMaterial.clone());\n      \n      bubble.position.x = (Math.random() - 0.5) * 80;\n      bubble.position.y = (Math.random() - 0.5) * 80;\n      bubble.position.z = (Math.random() - 0.5) * 80;\n      \n      bubble.scale.setScalar(Math.random() * 3 + 1);\n      bubble.userData = {\n        originalScale: bubble.scale.x,\n        speed: Math.random() * 0.02 + 0.01,\n        offset: Math.random() * Math.PI * 2,\n        originalPosition: bubble.position.clone(),\n        targetPosition: bubble.position.clone(),\n        velocity: new THREE.Vector3(),\n      };\n\n      spheresRef.current.push(bubble);\n      sceneRef.current.add(bubble);\n    }\n  };\n\n  const handleMouseMove = (event) => {\n    // Update 2D mouse coordinates\n    mouseRef.current.x = (event.clientX / window.innerWidth) * 2 - 1;\n    mouseRef.current.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n    // Calculate world coordinates\n    const vector = new THREE.Vector3(mouseRef.current.x, mouseRef.current.y, 0.5);\n    vector.unproject(cameraRef.current);\n    const dir = vector.sub(cameraRef.current.position).normalize();\n    const distance = -cameraRef.current.position.z / dir.z;\n    const pos = cameraRef.current.position.clone().add(dir.multiplyScalar(distance));\n    mouseRef.current.worldX = pos.x;\n    mouseRef.current.worldY = pos.y;\n\n    // Update target rotation for camera\n    targetRotationRef.current.x = mouseRef.current.y * 0.5;\n    targetRotationRef.current.y = mouseRef.current.x * 0.5;\n\n    if (raycasterRef.current && cameraRef.current) {\n      raycasterRef.current.setFromCamera(mouseRef.current, cameraRef.current);\n      const intersects = raycasterRef.current.intersectObjects(spheresRef.current);\n      updateCursorTrail(event.clientX, event.clientY, intersects.length > 0);\n\n      // Highlight intersected bubbles\n      spheresRef.current.forEach(bubble => {\n        if (intersects.find(intersect => intersect.object === bubble)) {\n          bubble.material.opacity = 0.6;\n          bubble.material.emissive.set(0x64ffda);\n          bubble.material.emissiveIntensity = 0.5;\n        } else {\n          bubble.material.opacity = 0.2;\n          bubble.material.emissive.set(0x000000);\n          bubble.material.emissiveIntensity = 0;\n        }\n      });\n    }\n  };\n\n  const createCursorTrail = () => {\n    const trail = document.createElement('div');\n    trail.style.position = 'absolute';\n    trail.style.width = '10px';\n    trail.style.height = '10px';\n    trail.style.borderRadius = '50%';\n    trail.style.backgroundColor = 'rgba(100, 255, 218, 0.5)';\n    trail.style.pointerEvents = 'none';\n    trail.style.transform = 'translate(-50%, -50%)';\n    trail.style.transition = 'width 0.3s, height 0.3s, opacity 0.3s, background-color 0.3s';\n    trail.style.opacity = '0';\n    cursorRef.current?.appendChild(trail);\n    return trail;\n  };\n\n  const updateCursorTrail = (x, y, isHovering) => {\n    if (!cursorRef.current) return;\n\n    if (cursorTrailRef.current.length === 0) {\n      cursorTrailRef.current = Array.from({ length: 20 }, createCursorTrail);\n    }\n\n    cursorTrailRef.current.forEach((trail, index) => {\n      const delay = index * 0.05;\n      const trailX = x + Math.sin(Date.now() * 0.001 + index) * (isHovering ? 10 : 5);\n      const trailY = y + Math.cos(Date.now() * 0.001 + index) * (isHovering ? 10 : 5);\n\n      trail.style.left = `${trailX}px`;\n      trail.style.top = `${trailY}px`;\n\n      if (isHovering) {\n        trail.style.width = `${25 + index * 5}px`;\n        trail.style.height = `${25 + index * 5}px`;\n        trail.style.backgroundColor = `rgba(100, 255, 218, ${0.8 - index * 0.03})`;\n        trail.style.opacity = '1';\n      } else {\n        trail.style.width = '10px';\n        trail.style.height = '10px';\n        trail.style.backgroundColor = `rgba(100, 255, 218, ${0.5 - index * 0.02})`;\n        trail.style.opacity = '0.7';\n      }\n    });\n  };\n\n  const handleWindowResize = () => {\n    if (!cameraRef.current || !rendererRef.current) return;\n\n    const WIDTH = window.innerWidth;\n    const HEIGHT = window.innerHeight;\n\n    cameraRef.current.aspect = WIDTH / HEIGHT;\n    cameraRef.current.updateProjectionMatrix();\n    rendererRef.current.setSize(WIDTH, HEIGHT);\n  };\n\n  const animate = () => {\n    if (!sceneRef.current || !cameraRef.current || !rendererRef.current) return;\n\n    requestAnimationFrame(animate);\n    const elapsedTime = clockRef.current.getElapsedTime();\n\n    // Update particles\n    if (particlesRef.current) {\n      const positions = particlesRef.current.geometry.attributes.position.array;\n      const scales = particlesRef.current.geometry.attributes.scale.array;\n\n      for (let i = 0; i < positions.length; i += 3) {\n        const x = positions[i];\n        const y = positions[i + 1];\n        const z = positions[i + 2];\n\n        // Calculate distance to mouse\n        const dx = x - mouseRef.current.worldX;\n        const dy = y - mouseRef.current.worldY;\n        const dist = Math.sqrt(dx * dx + dy * dy);\n\n        // Update particle positions based on mouse proximity\n        if (dist < 20) {\n          const angle = Math.atan2(dy, dx);\n          const force = (20 - dist) * 0.05;\n          positions[i] += Math.cos(angle) * force;\n          positions[i + 1] += Math.sin(angle) * force;\n\n          // Pulse effect\n          scales[i / 3] = Math.min(2, scales[i / 3] + 0.02);\n        } else {\n          // Return to original scale\n          scales[i / 3] = Math.max(\n            Math.random(),\n            scales[i / 3] - 0.01\n          );\n        }\n\n        // Add some natural movement\n        positions[i] += Math.sin(elapsedTime * 0.5 + (i / 3)) * 0.02;\n        positions[i + 1] += Math.cos(elapsedTime * 0.5 + (i / 3)) * 0.02;\n      }\n\n      particlesRef.current.geometry.attributes.position.needsUpdate = true;\n      particlesRef.current.geometry.attributes.scale.needsUpdate = true;\n      particlesRef.current.rotation.y = elapsedTime * 0.05;\n    }\n\n    // Update bubbles with smooth movement\n    spheresRef.current.forEach((bubble, i) => {\n      const { speed, offset, originalPosition, targetPosition, velocity } = bubble.userData;\n\n      // Calculate distance to mouse\n      const dx = bubble.position.x - mouseRef.current.worldX;\n      const dy = bubble.position.y - mouseRef.current.worldY;\n      const dist = Math.sqrt(dx * dx + dy * dy);\n\n      if (dist < 30) {\n        // Repel from mouse\n        const angle = Math.atan2(dy, dx);\n        const force = (30 - dist) * 0.03;\n        targetPosition.x = bubble.position.x + Math.cos(angle) * force;\n        targetPosition.y = bubble.position.y + Math.sin(angle) * force;\n      } else {\n        // Return to original position with oscillation\n        targetPosition.x = originalPosition.x + Math.sin(elapsedTime * speed + offset) * 5;\n        targetPosition.y = originalPosition.y + Math.cos(elapsedTime * speed + offset) * 5;\n      }\n\n      // Smooth movement using velocity\n      velocity.x += (targetPosition.x - bubble.position.x) * 0.1;\n      velocity.y += (targetPosition.y - bubble.position.y) * 0.1;\n      velocity.multiplyScalar(0.95); // Damping\n\n      bubble.position.x += velocity.x;\n      bubble.position.y += velocity.y;\n\n      // Rotation and scale effects\n      bubble.rotation.x = elapsedTime * speed * 0.5;\n      bubble.rotation.z = elapsedTime * speed * 0.3;\n\n      const scale = bubble.userData.originalScale + Math.sin(elapsedTime * speed + offset) * 0.2;\n      bubble.scale.setScalar(scale);\n    });\n\n    // Smooth camera rotation\n    cameraRef.current.rotation.x += (targetRotationRef.current.x - cameraRef.current.rotation.x) * 0.1;\n    cameraRef.current.rotation.y += (targetRotationRef.current.y - cameraRef.current.rotation.y) * 0.1;\n\n    // Update controls\n    controlsRef.current?.update();\n\n    // Render\n    rendererRef.current.render(sceneRef.current, cameraRef.current);\n  };\n\n  useEffect(() => {\n    createScene();\n    createLights();\n    createParticles();\n    createBubbles();\n    animate();\n\n    window.addEventListener('resize', handleWindowResize);\n    window.addEventListener('mousemove', handleMouseMove);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n\n      // Cleanup cursor trail\n      cursorTrailRef.current.forEach(trail => {\n        trail.parentNode?.removeChild(trail);\n      });\n\n      // Cleanup Three.js resources\n      spheresRef.current.forEach(bubble => {\n        bubble.geometry.dispose();\n        bubble.material.dispose();\n      });\n\n      if (particlesRef.current) {\n        particlesRef.current.geometry.dispose();\n        particlesRef.current.material.dispose();\n      }\n\n      rendererRef.current?.dispose();\n      containerRef.current?.removeChild(rendererRef.current?.domElement);\n    };\n  }, []);\n\n  return (\n    <>\n      <BackgroundContainer ref={containerRef} />\n      <CursorEffect ref={cursorRef} />\n    </>\n  );\n};\n\nexport default Background3D; "],"names":["BackgroundContainer","styled","CursorEffect","containerRef","useRef","cursorRef","sceneRef","cameraRef","rendererRef","controlsRef","spheresRef","particlesRef","raycasterRef","clockRef","THREE","mouseRef","x","y","worldX","worldY","cursorTrailRef","targetRotationRef","handleMouseMove","event","current","clientX","window","innerWidth","clientY","innerHeight","vector","unproject","dir","sub","position","normalize","distance","z","pos","clone","add","multiplyScalar","setFromCamera","intersects","intersectObjects","updateCursorTrail","length","forEach","bubble","find","intersect","object","material","opacity","emissive","set","emissiveIntensity","createCursorTrail","trail","document","createElement","style","width","height","borderRadius","backgroundColor","pointerEvents","transform","transition","appendChild","isHovering","Array","from","index","trailX","Math","sin","Date","now","trailY","cos","left","top","handleWindowResize","WIDTH","HEIGHT","aspect","updateProjectionMatrix","setSize","animate","requestAnimationFrame","elapsedTime","getElapsedTime","positions","geometry","attributes","array","scales","scale","i","dx","dy","dist","sqrt","angle","atan2","force","min","max","random","needsUpdate","rotation","speed","offset","originalPosition","targetPosition","velocity","userData","originalScale","setScalar","update","render","useEffect","scene","background","camera","renderer","antialias","alpha","setPixelRatio","devicePixelRatio","domElement","controls","OrbitControls","enableZoom","enablePan","enableDamping","dampingFactor","rotateSpeed","createScene","ambientLight","pointLight","pointLight2","createLights","particlesGeometry","count","Float32Array","colors","color1","color2","mixedColor","lerp","r","g","b","setAttribute","particlesMaterial","size","sizeAttenuation","transparent","vertexColors","blending","particles","createParticles","bubbleGeometry","bubbleMaterial","color","roughness","metalness","clearcoat","clearcoatRoughness","PI","push","createBubbles","addEventListener","removeEventListener","parentNode","removeChild","dispose","ref"],"sourceRoot":""}